{"version":3,"file":"DocViewer-stories.abb5ed97.iframe.bundle.js","mappings":";AAQA;AACA;AAGA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;;AAUA;;;;;;;;;AASA;AACA;;;;;;;;;;;AAcA;AACA;AC7DA;;;;;;;ACmDA;AAGA;;;;;;;;;AAUA;;;;;AC5CA;;;;;;;;;;ACUA;;;;;;;;;;;;;ACmEA;;;;;;AAQA;;;;;;;AASA;AACA;;;;AAMA;;;AAGA;;;;;;;;;;;;;AChGA;;;;AChCA;;;;;ACuCA;;;;AAIA;AC3CA;;ACsDA;;;;;;ACNA;;AAEA;;;;;;;;;;;ACAA;;;ACGA;;;;;;;;;AAcA;;AAAA;AACA;;;;;;;;;;;;;;;ACVA;;;;;;;;;;;;;;AC1BA;;;;AAMA;;;;AAIA;;;;AAIA;;AC7CA;;;;;;;;;;;;;;;;;AAmBA;;;ACnBA;;;;;;;ACwDA;;;;;;;;;;;;ACzDA;;ACkBA;;;;ACVA","sources":["webpack://@revale/react-doc-viewer-mui/./src/components/common/Button.ts","webpack://@revale/react-doc-viewer-mui/./src/components/icons/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/components/DocumentNav.tsx","webpack://@revale/react-doc-viewer-mui/./src/components/FileName.tsx","webpack://@revale/react-doc-viewer-mui/./src/components/HeaderBar.tsx","webpack://@revale/react-doc-viewer-mui/./src/components/ProxyRenderer.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/image/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/bmp/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/html/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/jpg/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/msdoc/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/pdf/components/pages/PDFSinglePage.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/pdf/components/pages/PDFPages.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/pdf/components/PDFPagination.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/pdf/components/PDFControls.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/pdf/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/png/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/txt/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/csv/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/gif/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/video/index.tsx","webpack://@revale/react-doc-viewer-mui/./src/renderers/index.ts"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport { IStyledProps } from \"../..\";\n\ninterface ButtonProps extends IStyledProps {\n  disabled?: boolean;\n}\n\nexport const ButtonPrimaryStyle = css`\n  background-color: ${(props: IStyledProps) => props.theme.primary};\n  color: ${(props: IStyledProps) => props.theme.textPrimary};\n`;\n\nexport const ButtonSecondaryStyle = css`\n  background-color: ${(props: IStyledProps) => props.theme.secondary};\n  color: ${(props: IStyledProps) => props.theme.textSecondary};\n`;\n\nexport const Button = styled.button<ButtonProps>`\n  ${ButtonPrimaryStyle}\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 35px;\n  height: 35px;\n  padding: 0;\n  margin: 0 0 0 5px;\n  text-align: center;\n  font-size: 18px;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  opacity: ${(props) => (props.disabled ? 0.4 : 1)};\n  pointer-events: ${(props) => (props.disabled ? \"none\" : \"all\")};\n  box-shadow: 2px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n`;\n\nexport const LinkButton = styled.a`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  text-decoration: none;\n  border-radius: 35px;\n  background-color: ${(props: IStyledProps) => props.theme.primary};\n  color: ${(props: IStyledProps) => props.theme.textPrimary};\n  box-shadow: 2px 2px 3px #00000033;\n\n  width: 35px;\n  height: 35px;\n  font-size: 18px;\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 15px;\n  }\n`;\n\nexport const ButtonPrimary = styled(Button)``;\nexport const ButtonSecondary = styled(Button)`\n  ${ButtonSecondaryStyle}\n`;\n","import React from \"react\";\n\nexport interface IIconProps {\n  color?: string;\n  size?: string | number | (string & {}) | undefined;\n  reverse?: boolean;\n}\n\nexport const PrevDocIcon = (props: IIconProps) => {\n  return <DocNavIcon {...props} />;\n};\n\nexport const NextDocIcon = (props: IIconProps) => {\n  return <DocNavIcon {...props} reverse />;\n};\n\nconst DocNavIcon = ({ color, size, reverse }: IIconProps) => {\n  return (\n    <svg\n      width={size || \"100%\"}\n      height={size || \"100%\"}\n      style={{ transform: `${reverse ? \"rotate(180deg)\" : \"\"}` }}\n      id=\"arrow_left\"\n      version=\"1.1\"\n      viewBox={`0 0 32 32`}\n      xmlSpace=\"preserve\"\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M31.106,15H3.278l8.325-8.293  c0.391-0.391,0.391-1.024,0-1.414c-0.391-0.391-1.024-0.391-1.414,0l-9.9,9.899c-0.385,0.385-0.385,1.029,0,1.414l9.9,9.9  c0.391,0.391,1.024,0.391,1.414,0c0.391-0.391,0.391-1.024,0-1.414L3.278,17h27.828c0.552,0,1-0.448,1-1  C32.106,15.448,31.658,15,31.106,15z\"\n        fill={color || \"#aaa\"}\n        fillRule=\"evenodd\"\n        id=\"Arrow_Back\"\n      />\n    </svg>\n  );\n};\n\nexport const LoadingIcon = (props: IIconProps) => {\n  const { color, size } = props;\n\n  return (\n    <svg\n      width={size || \"100%\"}\n      height={size || \"100%\"}\n      version=\"1.1\"\n      id=\"Icons\"\n      viewBox=\"0 0 32 32\"\n      xmlSpace=\"preserve\"\n      style={{ alignSelf: \"center\", justifySelf: \"center\" }}\n    >\n      <g>\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M16,2c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1s1-0.4,1-1V3C17,2.4,16.6,2,16,2z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M7.5,6.1c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l3.5,3.5c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3c0.4-0.4,0.4-1,0-1.4L7.5,6.1\n\t\tz\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M9,16c0-0.6-0.4-1-1-1H3c-0.6,0-1,0.4-1,1s0.4,1,1,1h5C8.6,17,9,16.6,9,16z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M9.6,20.9l-3.5,3.5c-0.4,0.4-0.4,1,0,1.4c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3l3.5-3.5c0.4-0.4,0.4-1,0-1.4\n\t\tS10,20.6,9.6,20.9z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M16,23c-0.6,0-1,0.4-1,1v5c0,0.6,0.4,1,1,1s1-0.4,1-1v-5C17,23.4,16.6,23,16,23z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M22.4,20.9c-0.4-0.4-1-0.4-1.4,0s-0.4,1,0,1.4l3.5,3.5c0.2,0.2,0.5,0.3,0.7,0.3s0.5-0.1,0.7-0.3c0.4-0.4,0.4-1,0-1.4\n\t\tL22.4,20.9z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M29,15h-5c-0.6,0-1,0.4-1,1s0.4,1,1,1h5c0.6,0,1-0.4,1-1S29.6,15,29,15z\"\n        />\n        <path\n          fill={color || \"#aaa\"}\n          d=\"M21.7,11.3c0.3,0,0.5-0.1,0.7-0.3l3.5-3.5c0.4-0.4,0.4-1,0-1.4s-1-0.4-1.4,0l-3.5,3.5c-0.4,0.4-0.4,1,0,1.4\n\t\tC21.1,11.2,21.4,11.3,21.7,11.3z\"\n        />\n      </g>\n    </svg>\n  );\n};\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { DocViewerContext } from \"../store/DocViewerProvider\";\nimport { nextDocument, previousDocument } from \"../store/actions\";\nimport { IStyledProps } from \"..\";\nimport { ButtonSecondary } from \"./common/Button\";\nimport { NextDocIcon, PrevDocIcon } from \"./icons\";\nimport { useTranslation } from \"../hooks/useTranslation\";\n\nexport const DocumentNav: FC<{}> = () => {\n  const {\n    state: { currentDocument, currentFileNo, documents },\n    dispatch,\n  } = useContext(DocViewerContext);\n  const { t } = useTranslation();\n\n  if (documents.length <= 1 || !currentDocument) return null;\n\n  let fileName = currentDocument.uri || \"\";\n  const splitURL = fileName.split(\"/\");\n  if (splitURL.length) {\n    fileName = splitURL[splitURL.length - 1];\n  }\n\n  return (\n    <Container id=\"doc-nav\">\n      <p id=\"doc-nav-info\">\n        {t(\"documentNavInfo\", {\n          currentFileNo: currentFileNo + 1,\n          allFilesCount: documents.length,\n        })}\n      </p>\n\n      <ButtonPrev\n        id=\"doc-nav-prev\"\n        onClick={() => dispatch(previousDocument())}\n        disabled={currentFileNo === 0}\n      >\n        <PrevDocIcon color=\"#fff\" size=\"60%\" />\n      </ButtonPrev>\n\n      <ButtonNext\n        id=\"doc-nav-next\"\n        onClick={() => dispatch(nextDocument())}\n        disabled={currentFileNo >= documents.length - 1}\n      >\n        <NextDocIcon color=\"#fff\" size=\"60%\" />\n      </ButtonNext>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  min-width: 150px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 0 10px;\n  color: ${(props: IStyledProps) => props.theme.textPrimary};\n`;\n\nconst ButtonPrev = styled(ButtonSecondary)`\n  width: 30px;\n  height: 30px;\n  margin: 0 5px 0 10px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n`;\nconst ButtonNext = styled(ButtonPrev)`\n  margin: 0 5px;\n`;\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { DocViewerContext } from \"../store/DocViewerProvider\";\nimport { IStyledProps } from \"..\";\nimport { getFileName } from \"../utils/getFileName\";\n\nexport const FileName: FC<{}> = () => {\n  const {\n    state: { config, currentDocument },\n  } = useContext(DocViewerContext);\n\n  if (!currentDocument || config?.header?.disableFileName) return null;\n\n  const fileName = getFileName(\n    currentDocument,\n    config?.header?.retainURLParams || false,\n  );\n\n  return (\n    <Container id=\"file-name\" data-testid=\"file-name\">\n      {fileName}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  flex: 1;\n  text-align: left;\n  color: ${(props: IStyledProps) => props.theme.textPrimary};\n  font-weight: bold;\n  margin: 0 10px;\n  overflow: hidden;\n`;\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { DocViewerContext } from \"../store/DocViewerProvider\";\nimport { nextDocument, previousDocument } from \"../store/actions\";\nimport { IStyledProps } from \"../models\";\nimport { DocumentNav } from \"./DocumentNav\";\nimport { FileName } from \"./FileName\";\n\nexport const HeaderBar: FC<{}> = () => {\n  const { state, dispatch } = useContext(DocViewerContext);\n  const { config } = state;\n\n  if (config?.header?.disableHeader) return null;\n\n  const override = config?.header?.overrideComponent?.(\n    state,\n    () => dispatch(previousDocument()),\n    () => dispatch(nextDocument()),\n  );\n\n  if (override) {\n    return override;\n  } else {\n    return (\n      <Container id=\"header-bar\" data-testid=\"header-bar\">\n        <FileName />\n        <DocumentNav />\n      </Container>\n    );\n  }\n};\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  z-index: 1;\n  padding: 0 10px;\n  background-color: ${(props: IStyledProps) => props.theme.primary};\n  font-size: 16px;\n  min-height: 50px;\n\n  @media (max-width: 768px) {\n    min-height: 30px;\n    padding: 5px;\n    font-size: 10px;\n  }\n`;\n","import React, { FC, useCallback } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { setRendererRect } from \"../store/actions\";\nimport { IStyledProps } from \"../models\";\nimport { getFileName } from \"../utils/getFileName\";\nimport { useDocumentLoader } from \"../hooks/useDocumentLoader\";\nimport { useWindowSize } from \"../hooks/useWindowSize\";\nimport { LinkButton } from \"./common\";\nimport { LoadingIcon } from \"./icons\";\nimport { LoadingTimeout } from \"./LoadingTimout\";\nimport { useTranslation } from \"../hooks/useTranslation\";\n\nexport const ProxyRenderer: FC = () => {\n  const { state, dispatch, CurrentRenderer } = useDocumentLoader();\n  const { documents, documentLoading, currentDocument, config } = state;\n  const size = useWindowSize();\n  const { t } = useTranslation();\n\n  const containerRef = useCallback(\n    (node: HTMLDivElement) => {\n      node && dispatch(setRendererRect(node?.getBoundingClientRect()));\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [size],\n  );\n\n  const fileName = getFileName(\n    currentDocument,\n    config?.header?.retainURLParams || false,\n  );\n\n  const Contents = () => {\n    if (!documents.length) {\n      return <div id=\"no-documents\"></div>;\n    } else if (documentLoading) {\n      if (config && config?.loadingRenderer?.overrideComponent) {\n        const OverrideComponent = config.loadingRenderer.overrideComponent;\n        return (\n          <LoadingTimeout>\n            <OverrideComponent document={currentDocument} fileName={fileName} />\n          </LoadingTimeout>\n        );\n      }\n\n      return (\n        <LoadingTimeout>\n          <LoadingContainer\n            id=\"loading-renderer\"\n            data-testid=\"loading-renderer\"\n          >\n            <LoadingIconContainer>\n              <LoadingIcon color=\"#444\" size={40} />\n            </LoadingIconContainer>\n          </LoadingContainer>\n        </LoadingTimeout>\n      );\n    } else {\n      if (CurrentRenderer) {\n        console.log({ state });\n        return <CurrentRenderer mainState={state} />;\n      } else if (CurrentRenderer === undefined) {\n        return null;\n      } else {\n        if (config && config?.noRenderer?.overrideComponent) {\n          const OverrideComponent = config.noRenderer.overrideComponent;\n          return (\n            <OverrideComponent document={currentDocument} fileName={fileName} />\n          );\n        }\n\n        return (\n          <div id=\"no-renderer\" data-testid=\"no-renderer\">\n            {t(\"noRendererMessage\", {\n              fileType: currentDocument?.fileType ?? \"\",\n            })}\n            <DownloadButton\n              id=\"no-renderer-download\"\n              href={currentDocument?.uri}\n              download={currentDocument?.uri}\n            >\n              {t(\"downloadButtonLabel\")}\n            </DownloadButton>\n          </div>\n        );\n      }\n    }\n  };\n\n  return (\n    <Container\n      id=\"proxy-renderer\"\n      data-testid=\"proxy-renderer\"\n      ref={containerRef}\n    >\n      <Contents />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex: 1;\n  height: 75px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst spinAnim = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst LoadingIconContainer = styled.div`\n  animation-name: ${spinAnim};\n  animation-duration: 4s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n`;\n\nconst DownloadButton = styled(LinkButton)`\n  width: 130px;\n  height: 30px;\n  background-color: ${(props: IStyledProps) => props.theme.primary};\n  @media (max-width: 768px) {\n    width: 125px;\n    height: 25px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer } from \"../..\";\n\nconst ImageProxyRenderer: DocRenderer = (props) => {\n  const {\n    mainState: { currentDocument },\n    children,\n  } = props;\n\n  console.log({ currentDocument });\n\n  if (!currentDocument) return null;\n\n  return (\n    <Container id=\"image-renderer\" {...props}>\n      {children || <Img id=\"image-img\" src={currentDocument.uri}></Img>}\n    </Container>\n  );\n};\n\nexport default ImageProxyRenderer;\n\nImageProxyRenderer.fileTypes = [];\nImageProxyRenderer.weight = 0;\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: #fff;\n`;\n\nconst Img = styled.img`\n  max-width: 95%;\n  max-height: 95%;\n  height: auto;\n`;\n","import React from \"react\";\nimport { DocRenderer } from \"../..\";\nimport ImageProxyRenderer from \"../image\";\n\nconst BMPRenderer: DocRenderer = (props) => <ImageProxyRenderer {...props} />;\nBMPRenderer.fileTypes = [\"bmp\", \"image/bmp\"];\nBMPRenderer.weight = 0;\n\nexport default BMPRenderer;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer, IStyledProps } from \"../..\";\nimport { dataURLFileLoader } from \"../../utils/fileLoaders\";\n\nconst HTMLRenderer: DocRenderer = ({ mainState: { currentDocument } }) => {\n  useEffect(() => {\n    const b64String = currentDocument?.fileData as string;\n    const bodyBase64 = b64String?.replace(\"data:text/html;base64,\", \"\") || \"\";\n    const body: string = window.atob(bodyBase64);\n\n    let iframeCont = document.getElementById(\n      \"html-body\",\n    ) as HTMLIFrameElement | null;\n    let iframe = iframeCont?.contentWindow && iframeCont.contentWindow;\n    if (!iframe) return;\n\n    const iframeDoc = iframe.document;\n    iframeDoc.open();\n    iframeDoc.write(`${body}`);\n    iframeDoc.close();\n  }, [currentDocument]);\n\n  return (\n    <Container id=\"html-renderer\">\n      <BodyIFrame id=\"html-body\" sandbox=\"allow-same-origin\" />\n    </Container>\n  );\n};\n\nexport default HTMLRenderer;\n\nHTMLRenderer.fileTypes = [\"htm\", \"html\", \"text/htm\", \"text/html\"];\nHTMLRenderer.weight = 0;\nHTMLRenderer.fileLoader = dataURLFileLoader;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 30px;\n`;\n\nconst BodyIFrame = styled.iframe`\n  height: 100%;\n  padding: 15px;\n  margin: 20px 0 20px 0;\n  border: 1px solid ${(props: IStyledProps) => props.theme.secondary};\n`;\n","import React from \"react\";\nimport { DocRenderer } from \"../..\";\nimport ImageProxyRenderer from \"../image\";\n\nconst JPGRenderer: DocRenderer = (props) => <ImageProxyRenderer {...props} />;\n\nJPGRenderer.fileTypes = [\"jpg\", \"jpeg\", \"image/jpg\", \"image/jpeg\"];\nJPGRenderer.weight = 0;\n\nexport default JPGRenderer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer } from \"../..\";\n\nconst MSDocRenderer: DocRenderer = ({ mainState: { currentDocument } }) => {\n  if (!currentDocument) return null;\n\n  return (\n    <Container id=\"msdoc-renderer\">\n      <IFrame\n        id=\"msdoc-iframe\"\n        title=\"msdoc-iframe\"\n        src={`https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(\n          currentDocument.uri,\n        )}`}\n        frameBorder=\"0\"\n      />\n    </Container>\n  );\n};\n\nexport default MSDocRenderer;\n\nconst MSDocFTMaps = {\n  odt: [\"odt\", \"application/vnd.oasis.opendocument.text\"],\n  doc: [\"doc\", \"application/msword\"],\n  docx: [\n    \"docx\",\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    \"application/octet-stream\",\n  ],\n  xls: [\"xls\", \"application/vnd.ms-excel\"],\n  xlsx: [\n    \"xlsx\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  ],\n  ppt: [\"ppt\", \"application/vnd.ms-powerpoint\"],\n  pptx: [\n    \"pptx\",\n    \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  ],\n};\n\nMSDocRenderer.fileTypes = [\n  ...MSDocFTMaps.odt,\n  ...MSDocFTMaps.doc,\n  ...MSDocFTMaps.docx,\n  ...MSDocFTMaps.xls,\n  ...MSDocFTMaps.xlsx,\n  ...MSDocFTMaps.ppt,\n  ...MSDocFTMaps.pptx,\n];\nMSDocRenderer.weight = 0;\nMSDocRenderer.fileLoader = ({ fileLoaderComplete }) => fileLoaderComplete();\n\nconst Container = styled.div`\n  width: 100%;\n`;\nconst IFrame = styled.iframe`\n  width: 100%;\n  height: 100%;\n  border: 0;\n`;\n","import React, { FC, useContext } from \"react\";\nimport { Page } from \"react-pdf\";\nimport styled from \"styled-components\";\nimport { IStyledProps } from \"../../../..\";\nimport { useTranslation } from \"../../../../hooks/useTranslation\";\nimport { PDFContext } from \"../../state\";\n\ninterface Props {\n  pageNum?: number;\n}\n\nconst PDFSinglePage: FC<Props> = ({ pageNum }) => {\n  const {\n    state: { mainState, paginated, zoomLevel, numPages, currentPage },\n  } = useContext(PDFContext);\n  const { t } = useTranslation();\n\n  const rendererRect = mainState?.rendererRect || null;\n\n  const _pageNum = pageNum || currentPage;\n\n  return (\n    <PageWrapper id=\"pdf-page-wrapper\" last={_pageNum >= numPages}>\n      {!paginated && (\n        <PageTag id=\"pdf-page-info\">\n          {t(\"pdfPluginPageNumber\", {\n            currentPage: _pageNum,\n            allPagesCount: numPages,\n          })}\n        </PageTag>\n      )}\n      <Page\n        pageNumber={_pageNum || currentPage}\n        scale={zoomLevel}\n        height={(rendererRect?.height || 100) - 100}\n        width={(rendererRect?.width || 100) - 100}\n        loading={t(\"pdfPluginLoading\")}\n      />\n    </PageWrapper>\n  );\n};\n\nexport default PDFSinglePage;\n\ninterface PageWrapperProps {\n  last?: boolean;\n}\n\nconst PageWrapper = styled.div<PageWrapperProps>`\n  margin: 20px 0;\n`;\n\nconst PageTag = styled.div`\n  padding: 0 0 10px 10px;\n  color: ${(props: IStyledProps) => props.theme.textTertiary};\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n`;\n","/* eslint-disable */\nimport React, { FC, useContext, useEffect } from \"react\";\nimport { Document } from \"react-pdf\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"../../../../hooks/useTranslation\";\nimport { PDFContext } from \"../../state\";\nimport {\n  setNumPages,\n  setPDFPaginated,\n  setCurrentPage,\n} from \"../../state/actions\";\nimport { initialPDFState } from \"../../state/reducer\";\nimport { PDFAllPages } from \"./PDFAllPages\";\nimport PDFSinglePage from \"./PDFSinglePage\";\n\nconst PDFPages: FC<{}> = () => {\n  const {\n    state: { mainState, paginated },\n    dispatch,\n  } = useContext(PDFContext);\n  const { t } = useTranslation();\n\n  const currentDocument = mainState?.currentDocument || null;\n\n  useEffect(() => {\n    dispatch(setNumPages(initialPDFState.numPages));\n    dispatch(setPDFPaginated(!!currentDocument?.filePage));\n\n    if (!!currentDocument?.filePage) {\n      dispatch(setCurrentPage(currentDocument?.filePage));\n    }\n  }, [currentDocument]);\n\n  if (!currentDocument || currentDocument.fileData === undefined) return null;\n\n  console.log({ paginated, currentDocument });\n\n  return (\n    <DocumentPDF\n      file={currentDocument.fileData}\n      onLoadSuccess={({ numPages }) => dispatch(setNumPages(numPages))}\n      loading={<span>{t(\"pdfPluginLoading\")}</span>}\n    >\n      {paginated ? <PDFSinglePage /> : <PDFAllPages />}\n    </DocumentPDF>\n  );\n};\n\nconst DocumentPDF = styled(Document)`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n`;\n\nexport default PDFPages;\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"../../../components/common\";\nimport { IStyledProps } from \"../../..\";\nimport { PDFContext } from \"../state\";\nimport { setCurrentPage } from \"../state/actions\";\nimport { useTranslation } from \"../../../hooks/useTranslation\";\nimport { IconButton } from \"@mui/material\";\nimport ArrowRightTwoToneIcon from \"@mui/icons-material/ArrowRightTwoTone\";\nimport ArrowLeftTwoToneIcon from \"@mui/icons-material/ArrowLeftTwoTone\";\n\nconst PDFPagination: FC<{}> = () => {\n  const {\n    state: { currentPage, numPages },\n    dispatch,\n  } = useContext(PDFContext);\n  const { t } = useTranslation();\n\n  return (\n    <Container id=\"pdf-pagination\">\n      <IconButton\n        color=\"primary\"\n        size=\"small\"\n        id=\"pdf-pagination-prev\"\n        onClick={() => dispatch(setCurrentPage(currentPage - 1))}\n        disabled={currentPage === 1}\n      >\n        <ArrowLeftTwoToneIcon />\n      </IconButton>\n\n      <PageTag id=\"pdf-pagination-info\">\n        {t(\"pdfPluginPageNumber\", {\n          currentPage,\n          allPagesCount: numPages,\n        })}\n      </PageTag>\n\n      <IconButton\n        id=\"pdf-pagination-next\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => dispatch(setCurrentPage(currentPage + 1))}\n        disabled={currentPage >= numPages}\n      >\n        <ArrowRightTwoToneIcon />\n      </IconButton>\n    </Container>\n  );\n};\n\nexport default PDFPagination;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst PageNavButtonLeft = styled(Button)`\n  width: 30px;\n  height: 30px;\n  margin: 0 5px;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n`;\nconst PageNavButtonRight = styled(PageNavButtonLeft)`\n  margin: 0 20px 0 5px;\n`;\n\nconst PageTag = styled.div`\n  color: ${(props: IStyledProps) => props.theme.textPrimary};\n  font-size: 14px;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n`;\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { IStyledProps } from \"../../..\";\nimport { PDFContext } from \"../state\";\nimport { setZoomLevel } from \"../state/actions\";\nimport PDFPagination from \"./PDFPagination\";\nimport { IconButton } from \"@mui/material\";\nimport ZoomOutTwoToneIcon from \"@mui/icons-material/ZoomOutTwoTone\";\nimport ZoomInTwoToneIcon from \"@mui/icons-material/ZoomInTwoTone\";\nimport ZoomOutMapTwoToneIcon from \"@mui/icons-material/ZoomOutMapTwoTone\";\n\nconst PDFControls: FC<{}> = () => {\n  const {\n    state: { paginated, zoomLevel, numPages, zoomJump, defaultZoomLevel },\n    dispatch,\n  } = useContext(PDFContext);\n\n  return (\n    <Container id=\"pdf-controls\">\n      {paginated && numPages > 1 && <PDFPagination />}\n\n      <IconButton\n        aria-label=\"zoom out\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => dispatch(setZoomLevel(zoomLevel - zoomJump))}\n      >\n        <ZoomOutTwoToneIcon />\n      </IconButton>\n\n      <IconButton\n        aria-label=\"zoom in\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => dispatch(setZoomLevel(zoomLevel + zoomJump))}\n      >\n        <ZoomInTwoToneIcon />\n      </IconButton>\n\n      <IconButton\n        aria-label=\"zoom in\"\n        color=\"primary\"\n        size=\"small\"\n        disabled={zoomLevel === defaultZoomLevel}\n        onClick={() => dispatch(setZoomLevel(defaultZoomLevel))}\n      >\n        <ZoomOutMapTwoToneIcon />\n      </IconButton>\n    </Container>\n  );\n};\n\nexport default PDFControls;\n\nconst Container = styled.div`\n  display: flex;\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  justify-content: flex-end;\n  padding: 8px;\n  background-color: ${(props: IStyledProps) => props.theme.tertiary};\n  box-shadow: 0px 2px 3px #00000033;\n\n  @media (max-width: 768px) {\n    padding: 6px;\n  }\n`;\n","import React from \"react\";\nimport { pdfjs } from \"react-pdf\";\nimport styled from \"styled-components\";\nimport { DocRenderer, IStyledProps } from \"../..\";\nimport PDFPages from \"./components/pages/PDFPages\";\nimport PDFControls from \"./components/PDFControls\";\nimport { PDFProvider } from \"./state\";\nimport \"react-pdf/dist/esm/Page/AnnotationLayer.css\";\nimport \"react-pdf/dist/esm/Page/TextLayer.css\";\n\npdfjs.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\n\nconst PDFRenderer: DocRenderer = ({ mainState }) => {\n  return (\n    <PDFProvider mainState={mainState}>\n      <Container id=\"pdf-renderer\" data-testid=\"pdf-renderer\">\n        <PDFControls />\n        <PDFPages />\n      </Container>\n    </PDFProvider>\n  );\n};\n\nexport default PDFRenderer;\n\nPDFRenderer.fileTypes = [\"pdf\", \"application/pdf\"];\nPDFRenderer.weight = 0;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow-y: auto;\n\n  /* width */\n  &::-webkit-scrollbar {\n    ${(props: IStyledProps) => {\n      return props.theme.disableThemeScrollbar ? \"\" : \"width: 10px\";\n    }};\n  }\n  /* Track */\n  &::-webkit-scrollbar-track {\n    /* background: ${(props: IStyledProps) => props.theme.secondary}; */\n  }\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: ${(props: IStyledProps) => props.theme.tertiary};\n  }\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: ${(props: IStyledProps) => props.theme.primary};\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer } from \"../..\";\nimport ImageProxyRenderer from \"../image\";\n\nconst StyledImageRenderer = styled(ImageProxyRenderer)`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  background-color: white;\n  background-image: linear-gradient(45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(-45deg, #e0e0e0 25%, transparent 25%),\n    linear-gradient(45deg, transparent 75%, #e0e0e0 75%),\n    linear-gradient(-45deg, transparent 75%, #e0e0e0 75%);\n  background-size: 20px 20px;\n  background-position:\n    0 0,\n    0 10px,\n    10px -10px,\n    -10px 0px;\n`;\n\nconst PNGRenderer: DocRenderer = (props) => <StyledImageRenderer {...props} />;\n\nPNGRenderer.fileTypes = [\"png\", \"image/png\"];\nPNGRenderer.weight = 0;\n\nexport default PNGRenderer;\n","import React, { ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer } from \"../..\";\nimport { textFileLoader } from \"../../utils/fileLoaders\";\n\nconst TXTRenderer: DocRenderer = ({ mainState: { currentDocument } }) => {\n  return (\n    <Container id=\"txt-renderer\">\n      {currentDocument?.fileData as ReactNode}\n    </Container>\n  );\n};\n\nexport default TXTRenderer;\n\nTXTRenderer.fileTypes = [\"txt\", \"text/plain\"];\nTXTRenderer.weight = 0;\nTXTRenderer.fileLoader = textFileLoader;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 30px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport papaparse from \"papaparse\";\nimport { DocRenderer } from \"../..\";\nimport { textFileLoader } from \"../../utils/fileLoaders\";\n\nconst CSVRenderer: DocRenderer = ({\n  mainState: { currentDocument, config },\n}) => {\n  const [rows, setRows] = useState<string[][]>([]);\n\n  useEffect(() => {\n    if (currentDocument?.fileData) {\n      const parseResult = papaparse.parse(currentDocument.fileData as string, {\n        delimiter: config?.csvDelimiter ?? \",\",\n      });\n\n      if (!parseResult.errors?.length && parseResult.data) {\n        setRows(parseResult.data as string[][]);\n      }\n    }\n  }, [currentDocument, config?.csvDelimiter]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <Table>\n        <thead>\n          <tr>\n            {rows[0].map((column) => (\n              <th key={column}>{column}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.slice(1, rows.length).map((row) => (\n            <tr key={row.join(\"\")}>\n              {row.map((column) => (\n                <td key={column}>{column}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default CSVRenderer;\n\nCSVRenderer.fileTypes = [\"csv\", \"text/csv\"];\nCSVRenderer.weight = 0;\nCSVRenderer.fileLoader = textFileLoader;\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  text-align: left;\n\n  th,\n  td {\n    padding: 5px 10px;\n\n    &:empty {\n      display: none;\n    }\n  }\n`;\n","import React from \"react\";\nimport { DocRenderer } from \"../..\";\nimport ImageProxyRenderer from \"../image\";\n\nconst JPGRenderer: DocRenderer = (props) => <ImageProxyRenderer {...props} />;\n\nJPGRenderer.fileTypes = [\"gif\", \"image/gif\"];\nJPGRenderer.weight = 0;\n\nexport default JPGRenderer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DocRenderer } from \"../..\";\n\nconst VideoRenderer: DocRenderer = ({ mainState: { currentDocument } }) => {\n  if (!currentDocument) return null;\n\n  return (\n    <Container id=\"video-renderer\">\n      <Video controls src={currentDocument.uri} />\n    </Container>\n  );\n};\n\nexport default VideoRenderer;\n\nVideoRenderer.fileTypes = [\"video/mp4\", \"video/quicktime\", \"video/x-msvideo\"];\nVideoRenderer.weight = 0;\n\nconst Container = styled.div`\n  width: 100%;\n`;\nconst Video = styled.video`\n  width: 100%;\n  height: 100%;\n  border: 0;\n`;\n","import BMPRenderer from \"./bmp\";\nimport HTMLRenderer from \"./html\";\nimport JPGRenderer from \"./jpg\";\nimport MSDocRenderer from \"./msdoc\";\nimport PDFRenderer from \"./pdf\";\nimport PNGRenderer from \"./png\";\nimport TIFFRenderer from \"./tiff\";\nimport TXTRenderer from \"./txt\";\nimport CSVRenderer from \"./csv\";\nimport GIFRenderer from \"./gif\";\nimport VideoRenderer from \"./video\";\n\nexport const DocViewerRenderers = [\n  BMPRenderer,\n  HTMLRenderer,\n  JPGRenderer,\n  MSDocRenderer,\n  PDFRenderer,\n  PNGRenderer,\n  TIFFRenderer,\n  TXTRenderer,\n  CSVRenderer,\n  GIFRenderer,\n  VideoRenderer,\n];\n\nexport {\n  BMPRenderer,\n  HTMLRenderer,\n  JPGRenderer,\n  MSDocRenderer,\n  PDFRenderer,\n  PNGRenderer,\n  TIFFRenderer,\n  TXTRenderer,\n  CSVRenderer,\n  GIFRenderer,\n  VideoRenderer,\n};\n"],"names":[],"sourceRoot":""}